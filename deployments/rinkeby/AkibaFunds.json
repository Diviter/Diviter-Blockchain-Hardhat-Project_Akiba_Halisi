{
  "address": "0xe4aA2bC057cd55A9bD70CD734B4A71632b694C61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToPremiumDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_userId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_phoneNumber",
          "type": "uint256"
        }
      ],
      "name": "createUserAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_accountNumber",
          "type": "uint256"
        }
      ],
      "name": "storeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userNameToUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c0fe63430b8f020716e1d2074ebe69858f95a3e0e71c932c28e29880be0667d",
  "receipt": {
    "to": null,
    "from": "0x44A699f64a1D3345b6f39AB7C5cDbFc4601087b5",
    "contractAddress": "0xe4aA2bC057cd55A9bD70CD734B4A71632b694C61",
    "transactionIndex": 3,
    "gasUsed": "1216175",
    "logsBloom": "0x
    "blockHash": "0x94864155e3d6261b1a9f8bfaac50d2ce67bfb873710ed04de909b3272f4635f3",
    "transactionHash": "0x5c0fe63430b8f020716e1d2074ebe69858f95a3e0e71c932c28e29880be0667d",
    "logs": [],
    "blockNumber": 11369263,
    "cumulativeGasUsed": "1685220",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "0528be0a7c6f8decbe3b946cd6951a61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPremiumDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phoneNumber\",\"type\":\"uint256\"}],\"name\":\"createUserAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountNumber\",\"type\":\"uint256\"}],\"name\":\"storeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userNameToUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AkibaHalisiFund.sol\":\"AkibaFunds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/AkibaHalisi.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.0;\\n\\n/**@title A sample Funding Contract\\n * @author Michael Diviter\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n//create a smart contract by the name akibaHalisi\\n//the contract should be able to create and store usersaccount\\n//users should be able to deposit and withdraw funds(after a required time stamp is reached\\n\\ncontract AkibaHalisi {\\n    address public i_Owner;\\n\\n    uint256 accountNumber;\\n\\n    modifier onlyOwner() {\\n        require(i_Owner == msg.sender);\\n        _;\\n    }\\n\\n    struct UserAccount {\\n        string userName;\\n        uint256 userId;\\n        uint256 phoneNumber;\\n    }\\n\\n    UserAccount[] useraccount;\\n    mapping(string => uint256) public userNameToUserId;\\n\\n    function storeAccount(uint256 _accountNumber) public {\\n        accountNumber = _accountNumber;\\n    }\\n\\n    function retrieve() public view returns (uint256) {\\n        return accountNumber;\\n    }\\n\\n    function createUserAccount(\\n        string memory _userName,\\n        uint256 _userId,\\n        uint256 _phoneNumber\\n    ) public onlyOwner {\\n        useraccount.push(UserAccount(_userName, _userId, _phoneNumber));\\n        userNameToUserId[_userName] = _userId;\\n    }\\n}\\n\",\"keccak256\":\"0x03922c5ad5510b8188fb0b8a39e8fb408f197d528abb8757417af4ccde4eac3a\",\"license\":\"MIT\"},\"contracts/AkibaHalisiFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AkibaHalisi.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./priceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\n\\ncontract AkibaFunds is AkibaHalisi {\\n    using priceInterface for uint256;\\n\\n    uint256 public constant premiumInUSD = 50 * 10**18;\\n    address[] private Insureds;\\n    mapping(address => uint256) public addressToPremiumDeposited;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_Owner = msg.sender;\\n    }\\n\\n    /*\\n    The functions needs:\\n    - abi of the price conversaton rate contract\\n    - address- from the chainlink data feeds ehtereum testnet (0x8A753747A1Fa494EC906cE90E9f37563A8AF630e)\\n    - choose a network to work with from the data.chain.link (rinkeyby)\\n    */\\n\\n    function Deposit() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= premiumInUSD,\\n            \\\"insuffient Amount\\\"\\n        );\\n\\n        // we are not passing a variable even though it is expected (uint256 ethAmount) this is because msg.value is the first variable recognised.\\n        addressToPremiumDeposited[msg.sender] += msg.value;\\n        Insureds.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    // creating a loop for withdraw function such that anytime premiums are send to th account it is withdrawn and reset to the initial default number of the address.\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 insuredIndex = 0;\\n            insuredIndex < Insureds.length;\\n            insuredIndex++\\n        ) {\\n            address insured = Insureds[insuredIndex];\\n            addressToPremiumDeposited[insured] = 0;\\n        }\\n\\n        //resetting the array\\n        Insureds = new address[](0);\\n\\n        //call\\n        (bool callSuccessful, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccessful, \\\"call failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xedfeebaf4cd09a80edbba3b0c8598a24b3035235f95099af3f018d6c2634926a\",\"license\":\"MIT\"},\"contracts/priceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\n\\nlibrary priceInterface {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x7fb28d6ca5ed26e3124878ba245a8279c2ab2fe5b4a94f9dd56afa1c28a927a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015a1380380620015a1833981810160405281019062000037919062000129565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b611436806200016b6000396000f3fe60806040526004361061009c5760003560e01c80636c41d0e7116100645780636c41d0e714610162578063722f3a9b1461019f578063738c944d146101c8578063bb737101146101f3578063e667b0bf14610230578063ed21248c1461025b5761009c565b80630d8e6e2c146100a15780630ec3b027146100cc5780631b69afa5146100f75780632e64cec1146101205780633ccfd60b1461014b575b600080fd5b3480156100ad57600080fd5b506100b6610265565b6040516100c39190610a27565b60405180910390f35b3480156100d857600080fd5b506100e161030c565b6040516100ee9190610ac1565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610b1c565b610332565b005b34801561012c57600080fd5b5061013561033c565b6040516101429190610a27565b60405180910390f35b34801561015757600080fd5b50610160610346565b005b34801561016e57600080fd5b5061018960048036038101906101849190610c8f565b61055a565b6040516101969190610a27565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c19190610cd8565b610588565b005b3480156101d457600080fd5b506101dd610681565b6040516101ea9190610a27565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190610d85565b61068e565b6040516102279190610a27565b60405180910390f35b34801561023c57600080fd5b506102456106a6565b6040516102529190610dc1565b60405180910390f35b6102636106ca565b005b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610df1565b905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060018190555050565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461039e57600080fd5b60005b60048054905081101561044a576000600482815481106103c4576103c3610e1e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610e7c565b9150506103a1565b50600067ffffffffffffffff81111561046657610465610b64565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600490805190602001906104aa9291906108e1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610ef6565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610f68565b60405180910390fd5b50565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e057600080fd5b60026040518060600160405280858152602001848152602001838152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908051906020019061064292919061096b565b50602082015181600101556040820151816002015550508160038460405161066a9190611002565b908152602001604051809103902081905550505050565b6802b5e3af16b188000081565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610709600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461080590919063ffffffff16565b101561074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611065565b60405180910390fd5b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107999190611085565b925050819055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008061081183610841565b90506000670de0b6b3a7640000858361082a91906110db565b6108349190611164565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561088a57600080fd5b505afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c2919061120d565b5050509150506402540be400816108d99190611288565b915050919050565b82805482825590600052602060002090810192821561095a579160200282015b828111156109595782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610901565b5b50905061096791906109f1565b5090565b828054610977906113ce565b90600052602060002090601f01602090048101928261099957600085556109e0565b82601f106109b257805160ff19168380011785556109e0565b828001600101855582156109e0579182015b828111156109df5782518255916020019190600101906109c4565b5b5090506109ed91906109f1565b5090565b5b80821115610a0a5760008160009055506001016109f2565b5090565b6000819050919050565b610a2181610a0e565b82525050565b6000602082019050610a3c6000830184610a18565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a87610a82610a7d84610a42565b610a62565b610a42565b9050919050565b6000610a9982610a6c565b9050919050565b6000610aab82610a8e565b9050919050565b610abb81610aa0565b82525050565b6000602082019050610ad66000830184610ab2565b92915050565b6000604051905090565b600080fd5b600080fd5b610af981610a0e565b8114610b0457600080fd5b50565b600081359050610b1681610af0565b92915050565b600060208284031215610b3257610b31610ae6565b5b6000610b4084828501610b07565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9c82610b53565b810181811067ffffffffffffffff82111715610bbb57610bba610b64565b5b80604052505050565b6000610bce610adc565b9050610bda8282610b93565b919050565b600067ffffffffffffffff821115610bfa57610bf9610b64565b5b610c0382610b53565b9050602081019050919050565b82818337600083830152505050565b6000610c32610c2d84610bdf565b610bc4565b905082815260208101848484011115610c4e57610c4d610b4e565b5b610c59848285610c10565b509392505050565b600082601f830112610c7657610c75610b49565b5b8135610c86848260208601610c1f565b91505092915050565b600060208284031215610ca557610ca4610ae6565b5b600082013567ffffffffffffffff811115610cc357610cc2610aeb565b5b610ccf84828501610c61565b91505092915050565b600080600060608486031215610cf157610cf0610ae6565b5b600084013567ffffffffffffffff811115610d0f57610d0e610aeb565b5b610d1b86828701610c61565b9350506020610d2c86828701610b07565b9250506040610d3d86828701610b07565b9150509250925092565b6000610d5282610a42565b9050919050565b610d6281610d47565b8114610d6d57600080fd5b50565b600081359050610d7f81610d59565b92915050565b600060208284031215610d9b57610d9a610ae6565b5b6000610da984828501610d70565b91505092915050565b610dbb81610d47565b82525050565b6000602082019050610dd66000830184610db2565b92915050565b600081519050610deb81610af0565b92915050565b600060208284031215610e0757610e06610ae6565b5b6000610e1584828501610ddc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8782610a0e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eba57610eb9610e4d565b5b600182019050919050565b600081905092915050565b50565b6000610ee0600083610ec5565b9150610eeb82610ed0565b600082019050919050565b6000610f0182610ed3565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f52600b83610f0b565b9150610f5d82610f1c565b602082019050919050565b60006020820190508181036000830152610f8181610f45565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610fbc578082015181840152602081019050610fa1565b83811115610fcb576000848401525b50505050565b6000610fdc82610f88565b610fe68185610f93565b9350610ff6818560208601610f9e565b80840191505092915050565b600061100e8284610fd1565b915081905092915050565b7f696e7375666669656e7420416d6f756e74000000000000000000000000000000600082015250565b600061104f601183610f0b565b915061105a82611019565b602082019050919050565b6000602082019050818103600083015261107e81611042565b9050919050565b600061109082610a0e565b915061109b83610a0e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110d0576110cf610e4d565b5b828201905092915050565b60006110e682610a0e565b91506110f183610a0e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561112a57611129610e4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061116f82610a0e565b915061117a83610a0e565b92508261118a57611189611135565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6111b481611195565b81146111bf57600080fd5b50565b6000815190506111d1816111ab565b92915050565b6000819050919050565b6111ea816111d7565b81146111f557600080fd5b50565b600081519050611207816111e1565b92915050565b600080600080600060a0868803121561122957611228610ae6565b5b6000611237888289016111c2565b9550506020611248888289016111f8565b945050604061125988828901610ddc565b935050606061126a88828901610ddc565b925050608061127b888289016111c2565b9150509295509295909350565b6000611293826111d7565b915061129e836111d7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156112dd576112dc610e4d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561131a57611319610e4d565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561135757611356610e4d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561139457611393610e4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113e657607f821691505b602082108114156113fa576113f961139f565b5b5091905056fea26469706673582212208da9a17c5cc340939955c5a984b4496c9a5e1bb7e3e732e28b912fa093625b7364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636c41d0e7116100645780636c41d0e714610162578063722f3a9b1461019f578063738c944d146101c8578063bb737101146101f3578063e667b0bf14610230578063ed21248c1461025b5761009c565b80630d8e6e2c146100a15780630ec3b027146100cc5780631b69afa5146100f75780632e64cec1146101205780633ccfd60b1461014b575b600080fd5b3480156100ad57600080fd5b506100b6610265565b6040516100c39190610a27565b60405180910390f35b3480156100d857600080fd5b506100e161030c565b6040516100ee9190610ac1565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610b1c565b610332565b005b34801561012c57600080fd5b5061013561033c565b6040516101429190610a27565b60405180910390f35b34801561015757600080fd5b50610160610346565b005b34801561016e57600080fd5b5061018960048036038101906101849190610c8f565b61055a565b6040516101969190610a27565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c19190610cd8565b610588565b005b3480156101d457600080fd5b506101dd610681565b6040516101ea9190610a27565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190610d85565b61068e565b6040516102279190610a27565b60405180910390f35b34801561023c57600080fd5b506102456106a6565b6040516102529190610dc1565b60405180910390f35b6102636106ca565b005b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103079190610df1565b905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060018190555050565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461039e57600080fd5b60005b60048054905081101561044a576000600482815481106103c4576103c3610e1e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610e7c565b9150506103a1565b50600067ffffffffffffffff81111561046657610465610b64565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600490805190602001906104aa9291906108e1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610ef6565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610f68565b60405180910390fd5b50565b6003818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e057600080fd5b60026040518060600160405280858152602001848152602001838152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908051906020019061064292919061096b565b50602082015181600101556040820151816002015550508160038460405161066a9190611002565b908152602001604051809103902081905550505050565b6802b5e3af16b188000081565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610709600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461080590919063ffffffff16565b101561074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611065565b60405180910390fd5b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107999190611085565b925050819055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008061081183610841565b90506000670de0b6b3a7640000858361082a91906110db565b6108349190611164565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561088a57600080fd5b505afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c2919061120d565b5050509150506402540be400816108d99190611288565b915050919050565b82805482825590600052602060002090810192821561095a579160200282015b828111156109595782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610901565b5b50905061096791906109f1565b5090565b828054610977906113ce565b90600052602060002090601f01602090048101928261099957600085556109e0565b82601f106109b257805160ff19168380011785556109e0565b828001600101855582156109e0579182015b828111156109df5782518255916020019190600101906109c4565b5b5090506109ed91906109f1565b5090565b5b80821115610a0a5760008160009055506001016109f2565b5090565b6000819050919050565b610a2181610a0e565b82525050565b6000602082019050610a3c6000830184610a18565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a87610a82610a7d84610a42565b610a62565b610a42565b9050919050565b6000610a9982610a6c565b9050919050565b6000610aab82610a8e565b9050919050565b610abb81610aa0565b82525050565b6000602082019050610ad66000830184610ab2565b92915050565b6000604051905090565b600080fd5b600080fd5b610af981610a0e565b8114610b0457600080fd5b50565b600081359050610b1681610af0565b92915050565b600060208284031215610b3257610b31610ae6565b5b6000610b4084828501610b07565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9c82610b53565b810181811067ffffffffffffffff82111715610bbb57610bba610b64565b5b80604052505050565b6000610bce610adc565b9050610bda8282610b93565b919050565b600067ffffffffffffffff821115610bfa57610bf9610b64565b5b610c0382610b53565b9050602081019050919050565b82818337600083830152505050565b6000610c32610c2d84610bdf565b610bc4565b905082815260208101848484011115610c4e57610c4d610b4e565b5b610c59848285610c10565b509392505050565b600082601f830112610c7657610c75610b49565b5b8135610c86848260208601610c1f565b91505092915050565b600060208284031215610ca557610ca4610ae6565b5b600082013567ffffffffffffffff811115610cc357610cc2610aeb565b5b610ccf84828501610c61565b91505092915050565b600080600060608486031215610cf157610cf0610ae6565b5b600084013567ffffffffffffffff811115610d0f57610d0e610aeb565b5b610d1b86828701610c61565b9350506020610d2c86828701610b07565b9250506040610d3d86828701610b07565b9150509250925092565b6000610d5282610a42565b9050919050565b610d6281610d47565b8114610d6d57600080fd5b50565b600081359050610d7f81610d59565b92915050565b600060208284031215610d9b57610d9a610ae6565b5b6000610da984828501610d70565b91505092915050565b610dbb81610d47565b82525050565b6000602082019050610dd66000830184610db2565b92915050565b600081519050610deb81610af0565b92915050565b600060208284031215610e0757610e06610ae6565b5b6000610e1584828501610ddc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8782610a0e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eba57610eb9610e4d565b5b600182019050919050565b600081905092915050565b50565b6000610ee0600083610ec5565b9150610eeb82610ed0565b600082019050919050565b6000610f0182610ed3565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f52600b83610f0b565b9150610f5d82610f1c565b602082019050919050565b60006020820190508181036000830152610f8181610f45565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610fbc578082015181840152602081019050610fa1565b83811115610fcb576000848401525b50505050565b6000610fdc82610f88565b610fe68185610f93565b9350610ff6818560208601610f9e565b80840191505092915050565b600061100e8284610fd1565b915081905092915050565b7f696e7375666669656e7420416d6f756e74000000000000000000000000000000600082015250565b600061104f601183610f0b565b915061105a82611019565b602082019050919050565b6000602082019050818103600083015261107e81611042565b9050919050565b600061109082610a0e565b915061109b83610a0e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110d0576110cf610e4d565b5b828201905092915050565b60006110e682610a0e565b91506110f183610a0e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561112a57611129610e4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061116f82610a0e565b915061117a83610a0e565b92508261118a57611189611135565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6111b481611195565b81146111bf57600080fd5b50565b6000815190506111d1816111ab565b92915050565b6000819050919050565b6111ea816111d7565b81146111f557600080fd5b50565b600081519050611207816111e1565b92915050565b600080600080600060a0868803121561122957611228610ae6565b5b6000611237888289016111c2565b9550506020611248888289016111f8565b945050604061125988828901610ddc565b935050606061126a88828901610ddc565b925050608061127b888289016111c2565b9150509295509295909350565b6000611293826111d7565b915061129e836111d7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156112dd576112dc610e4d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561131a57611319610e4d565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561135757611356610e4d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561139457611393610e4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113e657607f821691505b602082108114156113fa576113f961139f565b5b5091905056fea26469706673582212208da9a17c5cc340939955c5a984b4496c9a5e1bb7e3e732e28b912fa093625b7364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "i_Owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 52,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "accountNumber",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 74,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "useraccount",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(UserAccount)70_storage)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "userNameToUserId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 145,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "Insureds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 149,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "addressToPremiumDeposited",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserAccount)70_storage)dyn_storage": {
        "base": "t_struct(UserAccount)70_storage",
        "encoding": "dynamic_array",
        "label": "struct AkibaHalisi.UserAccount[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserAccount)70_storage": {
        "encoding": "inplace",
        "label": "struct AkibaHalisi.UserAccount",
        "members": [
          {
            "astId": 65,
            "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
            "label": "userName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 67,
            "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
            "label": "userId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 69,
            "contract": "contracts/AkibaHalisiFund.sol:AkibaFunds",
            "label": "phoneNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}